-- |
-- Module      : Elrond.Core.Types
-- Description :
-- Copyright   : (c) Jonatan H Sundqvist, 2015
-- License     : MIT
-- Maintainer  : Jonatan H Sundqvist
-- Stability   : experimental|stable
-- Portability : POSIX (not sure)
--

-- Created December 22 2015

-- TODO | -
--        -

-- SPEC | -
--        -



--------------------------------------------------------------------------------------------------------------------------------------------
-- GHC Pragmas
--------------------------------------------------------------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------------------------------------------------------------
-- API
--------------------------------------------------------------------------------------------------------------------------------------------
module Elrond.Core.Types where



--------------------------------------------------------------------------------------------------------------------------------------------
-- We'll need these
--------------------------------------------------------------------------------------------------------------------------------------------
import qualified Data.ByteString.Lazy as BS
import           Data.Word
import           Data.Functor
import           Data.Convertible
import           Data.DateTime
import           Data.Time.Clock

import Text.Printf

import Network.HTTP.Server
import Network.HTTP.Server.Logger
import Network.URL

-- import Database.HDBC
-- import Database.Sqlite3

import qualified Data.Aeson as JSON
-- import           Data.Aeson (toJSON, fromJSON)



--------------------------------------------------------------------------------------------------------------------------------------------
-- Types
--------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------

-- |
data Person = Person {}


-- |
data Message = Message { _sender     :: Person,
                         _timestamp  :: UTCTime,
                         _payload    :: BS.ByteString,
                         _recipients :: [Person] }

--------------------------------------------------------------------------------------------------------------------------------------------

-- |
newtype IP = IP (Word8, Word8, Word8, Word8)

--------------------------------------------------------------------------------------------------------------------------------------------

-- |
instance Show IP where
  show (IP (a, b, c, d)) = printf "%d.%d.%d.%d" a b c d
